<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Packages de support on Documentation Selenium</title>
    <link>https://selenium.dev/documentation/fr/support_packages/</link>
    <description>Recent content in Packages de support on Documentation Selenium</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2013-{year}</copyright>
    
	<atom:link href="https://selenium.dev/documentation/fr/support_packages/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Travailler avec les couleurs</title>
      <link>https://selenium.dev/documentation/fr/support_packages/working_with_colours/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/support_packages/working_with_colours/</guid>
      <description>Vous voudrez parfois valider la couleur de quelque chose dans le cadre de vos tests; le problème est que les définitions de couleurs sur le Web ne sont pas constantes. Ne serait-ce pas bien s&amp;rsquo;il y avait un moyen facile de comparer une représentation HEX d&amp;rsquo;une couleur avec une représentation RGB d&amp;rsquo;une couleur, ou une représentation RGBA d&amp;rsquo;une couleur avec une représentation HSLA d&amp;rsquo;une couleur?
Ne t&amp;rsquo;inquiètes pas. Il y a une solution: la classe Color!</description>
    </item>
    
    <item>
      <title>Travailler avec les éléments select</title>
      <link>https://selenium.dev/documentation/fr/support_packages/working_with_select_elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/support_packages/working_with_select_elements/</guid>
      <description>Certains éléments peuvent nécessiter un peu de code de plaque de chaudière pour automatiser. Pour réduire cela et rendre vos tests plus propres, il existe un Classe Select dans le package de support Selenium. Pour l&amp;rsquo;utiliser, vous aurez besoin de l&amp;rsquo;instruction d&amp;rsquo;importation suivante:
Java Python C# Ruby JavaScript Kotlin import org.openqa.selenium.support.ui.Select;   from selenium.webdriver.support.select import Select   using OpenQA.Selenium.Support.UI   include Selenium::WebDriver::Support   // We don&amp;#39;t have a JavaScript code sample yet - Help us out and raise a PR    import org.</description>
    </item>
    
    <item>
      <title>Actions de la souris en détail</title>
      <link>https://selenium.dev/documentation/fr/support_packages/mouse_and_keyboard_actions_in_detail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/support_packages/mouse_and_keyboard_actions_in_detail/</guid>
      <description>La souris représente un événement de souris. Les actions de la souris sont effectuées en utilisant une interface de bas niveau qui nous permet de fournir une action de saisie de périphérique virtualisé au navigateur Web.
clickAndHold Il se déplacera vers l&amp;rsquo;élément et cliquera (sans le relâcher) au milieu de l&amp;rsquo;élément donné.
Java Python C# Ruby JavaScript Kotlin import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.openqa.selenium.WebElement; import org.openqa.selenium.chrome.ChromeDriver; import org.openqa.selenium.interactions.Actions; public class clickAndHold { public static void main(String[] args) { WebDriver driver = new ChromeDriver(); try { // Navigate to Url  driver.</description>
    </item>
    
    <item>
      <title>Travailler avec des cookies</title>
      <link>https://selenium.dev/documentation/fr/support_packages/working_with_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/support_packages/working_with_cookies/</guid>
      <description>Un cookie est un petit morceau de données qui est envoyé à partir d&amp;rsquo;un site Web et stocké dans votre ordinateur. Les cookies sont principalement utilisés pour reconnaître l&amp;rsquo;utilisateur et charger les informations stockées.
L&amp;rsquo;API WebDriver fournit un moyen d&amp;rsquo;interagir avec les cookies avec des méthodes intégrées:
Add Cookie Il est utilisé pour ajouter un cookie au contexte de navigation actuel. Ajouter un cookie accepte uniquement un ensemble d&amp;rsquo;objets JSON sérialisables définis.</description>
    </item>
    
  </channel>
</rss>