<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebDriver on Documentation Selenium</title>
    <link>https://selenium.dev/documentation/fr/webdriver/</link>
    <description>Recent content in WebDriver on Documentation Selenium</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2013-{year}</copyright>
    
	<atom:link href="https://selenium.dev/documentation/fr/webdriver/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Comprendre les composants</title>
      <link>https://selenium.dev/documentation/fr/webdriver/understanding_the_components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/understanding_the_components/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 Building a test suite using WebDriver will require you to understand and effectively use a number of different components. As with everything in software, different people use different terms for the same idea. Below is a breakdown of how terms are used in this description.
Terminology  API: Application Programming Interface.</description>
    </item>
    
    <item>
      <title>Les pré-requis de WebDriver</title>
      <link>https://selenium.dev/documentation/fr/webdriver/driver_requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/driver_requirements/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 Through WebDriver, Selenium supports all major browsers on the market such as Chrom(ium), Firefox, Internet Explorer, Opera, and Safari. Where possible, WebDriver drives the browser using the browser&amp;rsquo;s built-in support for automation, although not all browsers have official support for remote control.
WebDriver&amp;rsquo;s aim is to emulate a real user&amp;rsquo;s interaction with the browser as closely as possible.</description>
    </item>
    
    <item>
      <title>Manipulation du navigateur</title>
      <link>https://selenium.dev/documentation/fr/webdriver/browser_manipulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/browser_manipulation/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 Ruby Ruby is not installed by default on Windows. Download the latest version and run the installer. You can leave all settings at default values, except at the Installation Destination and Optional Tasks screen check Add Ruby executables to your PATH checkbox. To drive any browser, you have to install selenium-webdriver Ruby gem.</description>
    </item>
    
    <item>
      <title>Waits</title>
      <link>https://selenium.dev/documentation/fr/webdriver/waits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/waits/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 WebDriver can generally be said to have a blocking API. Because it is an out-of-process library that instructs the browser what to do, and because the web platform has an intrinsically asynchronous nature, WebDriver doesn&amp;rsquo;t track the active, real-time state of the DOM. This comes with some challenges that we will discuss here.</description>
    </item>
    
    <item>
      <title>Classes de support</title>
      <link>https://selenium.dev/documentation/fr/webdriver/support_classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/support_classes/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 WebDriver support classes are provided to simplify maintaining your code. They provide a nice abstraction to make modeling HTML element(s) as domain objects easier, also providing helper methods to make using such objects easy to reason about. We will learn about:
 Locator Strategies Events LoadableComponent ThreadGuard etc.</description>
    </item>
    
    <item>
      <title>Alerts, prompts et confirmations Javascript</title>
      <link>https://selenium.dev/documentation/fr/webdriver/js_alerts_prompts_and_confirmations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/js_alerts_prompts_and_confirmations/</guid>
      <description>WebDriver fournit une API pour travailler avec les trois types de messages contextuels natifs proposés par JavaScript. Ces popups sont stylisés par le navigateur et offrent une personnalisation limitée.
Alerts Le plus simple d&amp;rsquo;entre eux est appelé une alerte, qui montre une message personnalisé, et un seul bouton qui rejette l&amp;rsquo;alerte, étiqueté dans la plupart des navigateurs comme OK. Il peut également être ignoré dans la plupart des navigateurs par en appuyant sur le bouton de fermeture, mais cela fera toujours la même chose que le bouton OK.</description>
    </item>
    
    <item>
      <title>Proxys HTTP</title>
      <link>https://selenium.dev/documentation/fr/webdriver/http_proxies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/http_proxies/</guid>
      <description>  Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 </description>
    </item>
    
    <item>
      <title>Stratégie de chargement de la page</title>
      <link>https://selenium.dev/documentation/fr/webdriver/page_loading_strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/page_loading_strategy/</guid>
      <description>  Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 </description>
    </item>
    
    <item>
      <title>Web element</title>
      <link>https://selenium.dev/documentation/fr/webdriver/web_element/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/web_element/</guid>
      <description>WebElement représente un élément DOM. Les WebElements peuvent être trouvés en recherchant racine du document à l&amp;rsquo;aide d&amp;rsquo;une instance WebDriver ou en recherchant sous une autre WebElement
L&amp;rsquo;API WebDriver fournit des méthodes intégrées pour trouver les WebElements qui sont basé sur différentes propriétés comme ID, nom, classe, XPath, sélecteurs CSS, texte de lien, etc.
Find Element Il est utilisé pour rechercher un élément et renvoie une première référence WebElement unique correspondante, qui peut être utilisé pour de futures actions d&amp;rsquo;élément</description>
    </item>
    
    <item>
      <title>Clavier</title>
      <link>https://selenium.dev/documentation/fr/webdriver/keyboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/keyboard/</guid>
      <description>Le clavier représente un événement KeyBoard. Les actions du clavier sont effectuées à l&amp;rsquo;aide de bas niveau interface qui nous permet de fournir une entrée d&amp;rsquo;appareil virtualisé au navigateur Web.
sendKeys SendKeys tape une séquence de touches dans l&amp;rsquo;élément DOM même si une séquence de touches de modification est rencontrée.
Java Python C# Ruby JavaScript Kotlin import org.openqa.selenium.By;import org.openqa.selenium.Keys;import org.openqa.selenium.WebDriver;import org.openqa.selenium.firefox.FirefoxDriver;public class HelloSelenium {public static void main(String[] args) {WebDriver driver = new FirefoxDriver();try {// Navigate to Url driver.</description>
    </item>
    
  </channel>
</rss>