<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebDriver on Documentation Selenium</title>
    <link>https://selenium.dev/documentation/fr/webdriver/</link>
    <description>Recent content in WebDriver on Documentation Selenium</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2013-{year}</copyright>
    
	<atom:link href="https://selenium.dev/documentation/fr/webdriver/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Comprendre les composants</title>
      <link>https://selenium.dev/documentation/fr/webdriver/understanding_the_components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/understanding_the_components/</guid>
      <description>Pour créer une suite de tests à l&amp;rsquo;aide de WebDriver, vous devrez comprendre et utiliser efficacement un certain nombre de composants différents. logiciel, différentes personnes utilisent des termes différents pour la même idée. une ventilation de la façon dont les termes sont utilisés dans cette description.
Terminologie  API: Interface de programmation d&amp;rsquo;application. Il s&amp;rsquo;agit de l&amp;rsquo;ensemble des &amp;ldquo;commandes&amp;rdquo; vous utilisez pour manipuler WebDriver. Bibliothèque: Un module de code qui contient les API et le code nécessaires Les bibliothèques sont spécifiques à chaque liaison de langue, par exemple .</description>
    </item>
    
    <item>
      <title>Les pré-requis de WebDriver</title>
      <link>https://selenium.dev/documentation/fr/webdriver/driver_requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/driver_requirements/</guid>
      <description>Grâce à WebDriver, Selenium prend en charge tous les principaux navigateurs du marché tels que Chrom(ium), Firefox, Internet Explorer, Opera et Safari. Dans la mesure du possible, WebDriver pilote le navigateur en utilisant la prise en charge intégrée du navigateur pour l&amp;rsquo;automatisation, bien que tous les navigateurs n&amp;rsquo;aient pas de support officiel pour la télécommande.
L&amp;rsquo;objectif de WebDriver est d&amp;rsquo;émuler l&amp;rsquo;interaction d&amp;rsquo;un utilisateur réel avec le navigateur le plus près possible.</description>
    </item>
    
    <item>
      <title>Manipulation du navigateur</title>
      <link>https://selenium.dev/documentation/fr/webdriver/browser_manipulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/browser_manipulation/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 Ruby Ruby is not installed by default on Windows. Download the latest version and run the installer. You can leave all settings at default values, except at the Installation Destination and Optional Tasks screen check Add Ruby executables to your PATH checkbox. To drive any browser, you have to install selenium-webdriver Ruby gem.</description>
    </item>
    
    <item>
      <title>Waits</title>
      <link>https://selenium.dev/documentation/fr/webdriver/waits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/waits/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 WebDriver can generally be said to have a blocking API. Because it is an out-of-process library that instructs the browser what to do, and because the web platform has an intrinsically asynchronous nature, WebDriver doesn&amp;rsquo;t track the active, real-time state of the DOM. This comes with some challenges that we will discuss here.</description>
    </item>
    
    <item>
      <title>Classes de support</title>
      <link>https://selenium.dev/documentation/fr/webdriver/support_classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/support_classes/</guid>
      <description>Les classes de support WebDriver sont fournies pour simplifier la maintenance de votre code.Elles fournissent une belle abstraction pour faciliter la modélisation des éléments HTML en tant qu&amp;rsquo;objets de domaine, ainsi que des méthodes d&amp;rsquo;aide pour rendre l&amp;rsquo;utilisation de ces objets facile à raisonner.
 Stratégies de localisation Événements LoadableComponent ThreadGuard etc.  Commençons:
ThreadGuard  Cette classe est uniquement disponible dans la liaison Java
 ThreadGuard vérifie qu&amp;rsquo;un pilote est appelé uniquement à partir du même thread qui l&amp;rsquo;a créé.</description>
    </item>
    
    <item>
      <title>Alerts, prompts et confirmations Javascript</title>
      <link>https://selenium.dev/documentation/fr/webdriver/js_alerts_prompts_and_confirmations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/js_alerts_prompts_and_confirmations/</guid>
      <description>WebDriver fournit une API pour travailler avec les trois types de messages contextuels natifs proposés par JavaScript. Ces popups sont stylisés par le navigateur et offrent une personnalisation limitée.
Alerts Le plus simple d&amp;rsquo;entre eux est appelé une alerte, qui montre une message personnalisé, et un seul bouton qui rejette l&amp;rsquo;alerte, étiqueté dans la plupart des navigateurs comme OK. Il peut également être ignoré dans la plupart des navigateurs par en appuyant sur le bouton de fermeture, mais cela fera toujours la même chose que le bouton OK.</description>
    </item>
    
    <item>
      <title>Proxys HTTP</title>
      <link>https://selenium.dev/documentation/fr/webdriver/http_proxies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/http_proxies/</guid>
      <description>  Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 </description>
    </item>
    
    <item>
      <title>Stratégie de chargement de la page</title>
      <link>https://selenium.dev/documentation/fr/webdriver/page_loading_strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/page_loading_strategy/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 Defines the current session&amp;rsquo;s page loading strategy. By default, when Selenium WebDriver loads a page, it follows the normal pageLoadStrategy. It is always recommended to stop downloading additional resources (like images, css, js) when the page loading takes lot of time.
The document.readyState property of a document describes the loading state of the current document.</description>
    </item>
    
    <item>
      <title>Web element</title>
      <link>https://selenium.dev/documentation/fr/webdriver/web_element/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/web_element/</guid>
      <description>WebElement représente un élément DOM. Les WebElements peuvent être trouvés en recherchant racine du document à l&amp;rsquo;aide d&amp;rsquo;une instance WebDriver ou en recherchant sous une autre WebElement
L&amp;rsquo;API WebDriver fournit des méthodes intégrées pour trouver les WebElements qui sont basé sur différentes propriétés comme ID, nom, classe, XPath, sélecteurs CSS, texte de lien, etc.
Find Element Il est utilisé pour rechercher un élément et renvoie une première référence WebElement unique correspondante, qui peut être utilisé pour de futures actions d&amp;rsquo;élément</description>
    </item>
    
    <item>
      <title>Clavier</title>
      <link>https://selenium.dev/documentation/fr/webdriver/keyboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/fr/webdriver/keyboard/</guid>
      <description>Le clavier représente un événement KeyBoard. Les actions du clavier sont effectuées à l&amp;rsquo;aide de bas niveau interface qui nous permet de fournir une entrée d&amp;rsquo;appareil virtualisé au navigateur Web.
sendKeys SendKeys tape une séquence de touches dans l&amp;rsquo;élément DOM même si une séquence de touches de modification est rencontrée.
Java Python C# Ruby JavaScript Kotlin import org.openqa.selenium.By;import org.openqa.selenium.Keys;import org.openqa.selenium.WebDriver;import org.openqa.selenium.firefox.FirefoxDriver;public class HelloSelenium {public static void main(String[] args) {WebDriver driver = new FirefoxDriver();try {// Navigate to Url driver.</description>
    </item>
    
  </channel>
</rss>