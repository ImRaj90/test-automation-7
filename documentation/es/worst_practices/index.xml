<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Malas prácticas on Documentación de Selenium</title>
    <link>https://selenium.dev/documentation/es/worst_practices/</link>
    <description>Recent content in Malas prácticas on Documentación de Selenium</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2013-{year}</copyright>
    
	<atom:link href="https://selenium.dev/documentation/es/worst_practices/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Captchas</title>
      <link>https://selenium.dev/documentation/es/worst_practices/captchas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/worst_practices/captchas/</guid>
      <description>CAPTCHA es la abreviatura de Completely Automated Public Turing test to tell Computers and Humans Apart o en español Prueba de Turing Completamente Automática y Pública para diferenciar Ordenadores de Humanos, está explícitamente diseñado para prevenir la automatización, ¡así que no intentes automatizarlo!
Existen dos estrategias principales para evitar los CAPTCHAs:
 Deshabilitar los CAPTCHAs en tus entornos de pruebas. Agrega un parámetro que permita que las pruebas hagan un baipás.</description>
    </item>
    
    <item>
      <title>Descarga de archivos</title>
      <link>https://selenium.dev/documentation/es/worst_practices/file_downloads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/worst_practices/file_downloads/</guid>
      <description>Mientras que es posible empezar una descarga haciendo clic en el enlace, con el navegador que este siendo controlado por Selenium, el API no expone el progreso de la descarga, haciéndolo poco ideal para probar la descarga de archivos. Esto es debido a que descargar archivos no es considerado un aspecto importante de la emulación de las interacciones de los usuarios con las plataformas web. En lugar de ello, se recomienda encontrar el enlace con Selenium (y cualquier Cookie requerida) y pasarselo a una librería que permita hacer peticiones HTTP como libcurl.</description>
    </item>
    
    <item>
      <title>Códigos de respuesta HTTP</title>
      <link>https://selenium.dev/documentation/es/worst_practices/http_response_codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/worst_practices/http_response_codes/</guid>
      <description>Para algunas configuraciones de navegadores en Selenium RC, Selenium actuaba como proxy entre el navegador y el sitio web que iba a ser automatizado. Esto significaba que todo el trafico que pasaba a través de Selenium podía ser capturado o manipulado. El método captureNetworkTraffic() pretendía capturar todo el trafico de red entre el navegador y el sitio que estaba siendo automatizado, incluyendo los códigos de respuestas HTTP.
El WebDriver de Selenium parte de una aproximación completamente diferente respecto a la automatización de los navegadores, prefiriendo así actuar mas como un usuario y esto se representa en la forma en la que escribes los tests con el WebDriver.</description>
    </item>
    
    <item>
      <title>Autenticarse con Gmail, email y Facebook</title>
      <link>https://selenium.dev/documentation/es/worst_practices/gmail_email_and_facebook_logins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/worst_practices/gmail_email_and_facebook_logins/</guid>
      <description>Por múltiples razones, autenticarse en sitios como Gmail y Facebook usando el WebDriver no esta recomendado. Aparte de estar en contra de los términos y condiciones de estos sitios (te expones a que te cierren la cuenta), es un proceso lento y poco fiable.
La practica ideal respecto a estos los sitios de emails es usar las APIs que ofrecen, en el caso de Facebook usar las herramientas para desarrolladores las cuales exponen un API para crear cuentas de prueba, amigos, etc.</description>
    </item>
    
    <item>
      <title>Dependencia entre pruebas</title>
      <link>https://selenium.dev/documentation/es/worst_practices/test_dependency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/worst_practices/test_dependency/</guid>
      <description>Page being translated from English to Spanish. Do you speak Spanish? Help us to translate it by sending us pull requests!
 A common idea and misconception about automated testing is regarding a specific test order. Your tests should be able to run in any order, and not rely on other tests to complete in order to be successful.</description>
    </item>
    
    <item>
      <title>Pruebas de desempeño</title>
      <link>https://selenium.dev/documentation/es/worst_practices/performance_testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/worst_practices/performance_testing/</guid>
      <description>Page being translated from English to Spanish. Do you speak Spanish? Help us to translate it by sending us pull requests!
 Performance testing using Selenium and WebDriver is generally not advised. Not because it is incapable but because it is not optimised for the job and you are unlikely to get good results.
It may seem ideal to performance test in the context of the user but a suite of WebDriver tests are subjected to many points of external and internal fragility which are beyond your control; for example browser startup speed, speed of HTTP servers, response of third party servers that host JavaScript or CSS, and the instrumentation penalty of the WebDriver implementation itself.</description>
    </item>
    
    <item>
      <title>Rastreo de enlaces</title>
      <link>https://selenium.dev/documentation/es/worst_practices/link_spidering/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/worst_practices/link_spidering/</guid>
      <description>Page being translated from English to Spanish. Do you speak Spanish? Help us to translate it by sending us pull requests!
 Using WebDriver to spider through links is not a recommended practice not because it cannot be done, but because it’s definitely not the most ideal tool. WebDriver needs time to start up, and can take several seconds up to a minute depending on how your test is written, just to get to the page and traverse through the DOM.</description>
    </item>
    
  </channel>
</rss>