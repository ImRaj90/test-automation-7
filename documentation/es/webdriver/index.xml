<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebDriver on Documentación de Selenium</title>
    <link>https://selenium.dev/documentation/es/webdriver/</link>
    <description>Recent content in WebDriver on Documentación de Selenium</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2013-{year}</copyright>
    
	<atom:link href="https://selenium.dev/documentation/es/webdriver/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Entendiendo los componentes</title>
      <link>https://selenium.dev/documentation/es/webdriver/understanding_the_components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/webdriver/understanding_the_components/</guid>
      <description>Construir una suite de test usando WebDriver requerirá que entiendas y uses de forma efectiva diferentes componentes. Como con todo en el desarrollo de software, la gente usa diferentes términos para la misma idea. A continuación hay un desglose de cómo los términos son usados en esa descripción.
Terminología  API: Interfaz de Programación de Aplicaciones. Es un conjunto de &amp;ldquo;comandos&amp;rdquo; que se utilizan para manipular el WebDriver. Library: Un módulo de código que contiene las APIs y el código necesario para implementarlos.</description>
    </item>
    
    <item>
      <title>Requerimientos de los controladores</title>
      <link>https://selenium.dev/documentation/es/webdriver/driver_requirements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/webdriver/driver_requirements/</guid>
      <description>A través del WebDriver, Selenium es capaz de soportar los navegadores mas usados en el mercado como Chrom(ium), Firefox, Internet Explorer, Opera y Safari. WebDriver maneja los navegadores, cuando es posible, apoyándose en las propias funciones que el navegador incorpora para la automatización.
La finalidad del WebDriver es emular las interacciones de los usuarios reales. Esto es posible en diversos niveles en diferentes navegadores. Para mas detalles sobre las diferentes comportamientos de los controladores, ver Comportamientos del controlador.</description>
    </item>
    
    <item>
      <title>Manipulación de Navegadores</title>
      <link>https://selenium.dev/documentation/es/webdriver/browser_manipulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/webdriver/browser_manipulation/</guid>
      <description>Page being translated from English to Spanish. Do you speak Spanish? Help us to translate it by sending us pull requests!
 Ruby Ruby is not installed by default on Windows. Download the latest version and run the installer. You can leave all settings at default values, except at the Installation Destination and Optional Tasks screen check Add Ruby executables to your PATH checkbox. To drive any browser, you have to install selenium-webdriver Ruby gem.</description>
    </item>
    
    <item>
      <title>Esperas</title>
      <link>https://selenium.dev/documentation/es/webdriver/waits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/webdriver/waits/</guid>
      <description>Page being translated from English to Spanish. Do you speak Spanish? Help us to translate it by sending us pull requests!
 WebDriver can generally be said to have a blocking API. Because it is an out-of-process library that instructs the browser what to do, and because the web platform has an intrinsically asynchronous nature, WebDriver doesn&amp;rsquo;t track the active, real-time state of the DOM. This comes with some challenges that we will discuss here.</description>
    </item>
    
    <item>
      <title>Clases de apoyo</title>
      <link>https://selenium.dev/documentation/es/webdriver/support_classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/webdriver/support_classes/</guid>
      <description>Las clases de soporte de WebDriver son proporcionadas para simplificar el mantenimiento de tu código. Proporcionan una buena abstracción para modelar mas fácilmente elementos HTML como objetos de dominio, también proporcionando métodos de ayuda para hacer que el uso de tales objetos sea fácil de razonar. Aprenderemos acerca de:
 Estrategias de localizacion Eventos LoadableComponent ThreadGuard etc.  Iniciemos:
ThreadGuard  Esta clase solo esta disponible en la librería de enlace de Java</description>
    </item>
    
    <item>
      <title>Alertas, avisos y confirmaciones de JavaScript</title>
      <link>https://selenium.dev/documentation/es/webdriver/js_alerts_prompts_and_confirmations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/webdriver/js_alerts_prompts_and_confirmations/</guid>
      <description>Page being translated from English to Spanish. Do you speak Spanish? Help us to translate it by sending us pull requests!
 WebDriver provides an API for working with the three types of native popup message offered by JavaScript. These popups are styled by the browser and offer limited customisation.
Alerts The simplest of these is referred to as an alert, which shows a custom message, and a single button which dismisses the alert, labelled in most browsers as OK.</description>
    </item>
    
    <item>
      <title>Proxies Http</title>
      <link>https://selenium.dev/documentation/es/webdriver/http_proxies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/webdriver/http_proxies/</guid>
      <description>Un servidor proxy actúa como intermediario para solicitudes entre un cliente y un servidor. En forma simple, el tráfico fluye a través del servidor proxy en camino a la dirección solicitada y de regreso.
Un servidor proxy para scripts de automatización con Selenium podría ser útil para:
 Captura el tráfico de la red Simular llamadas de backend realizadas por el sitio web Accede al sitio web requerido bajo topologías de red complejas o restricciones/políticas corporativas estrictas.</description>
    </item>
    
    <item>
      <title>Estrategia de carga de página</title>
      <link>https://selenium.dev/documentation/es/webdriver/page_loading_strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/webdriver/page_loading_strategy/</guid>
      <description>Define la estrategia de carga de la página en la sesión actual. Por defecto, cuando Selenium WebDriver carga una página, sigue la pageLoadStrategy normal. Siempre se recomienda detener la descarga de más recursos adicionales (como imágenes, css, js) cuando la carga de la página lleva mucho tiempo.
La propiedad document.readyState de un documento describe el estado de carga del documento actual. Por defecto, WebDriver esperará responder a una llamada driver.</description>
    </item>
    
    <item>
      <title>Elemento web</title>
      <link>https://selenium.dev/documentation/es/webdriver/web_element/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/webdriver/web_element/</guid>
      <description>WebElement representa un elemento del DOM. Los WebElements se pueden encontrar buscando desde la raíz del documento utilizando una instancia de WebDriver o buscando en otra WebElement.
El API WebDriver proporciona métodos integrados para encontrar los elementos web que son basados en diferentes propiedades como ID, Nombre, Clase, XPath, Selectores CSS, Texto de enlace, etc.
Find Element Se utiliza para encontrar un elemento y devuelve la primera referencia única de WebElement que coincide, que puede usarse para acciones futuras con el elemento</description>
    </item>
    
    <item>
      <title>Teclado</title>
      <link>https://selenium.dev/documentation/es/webdriver/keyboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://selenium.dev/documentation/es/webdriver/keyboard/</guid>
      <description>Page being translated from English to Spanish. Do you speak Spanish? Help us to translate it by sending us pull requests!
 Keyboard represents a KeyBoard event. KeyBoard actions are performed by using low-level interface which allows us to provide virtualized device input to the web browser.
sendKeys The sendKeys types a key sequence in DOM element even if modifier key sequence is encountered.
Java Python C# Ruby JavaScript Kotlin import org.</description>
    </item>
    
  </channel>
</rss>